name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-ubuntu-24_04:
    runs-on: ubuntu-24.04
    steps:
    - name: Add apt.llvm.org
      run: |
        echo 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble main' | sudo tee /etc/apt/sources.list.d/apt.llvm.org.list
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc

    - name: Upgrade packages
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y

    - name: Install libcanth dependencies
      run: |
        sudo apt-get install libcjson-dev

    - name: Upgrade Clang
      run: |
        sudo apt-get install clang{,-{format,tidy,tools}} lib{c++{,abi},clang,omp}-dev lld llvm{,-dev,-runtime}

    - name: Add Ubuntu 22.04 and 20.04 package repos
      run: |
        printf 'deb http://archive.ubuntu.com/ubuntu/ %s main restricted universe multiverse\n' jammy{,-{updates,security,backports}} | sudo tee /etc/apt/sources.list.d/jammy.list
        printf 'deb http://archive.ubuntu.com/ubuntu/ %s main restricted universe multiverse\n' focal{,-{updates,security,backports}} | sudo tee /etc/apt/sources.list.d/focal.list
        sudo apt-get update

    - name: Install Clang 6 through 15 and GCC 7 through 11
      run: |
        sudo apt-get install clang-{6.0,7,8,9,10,11,12,13,14,15} llvm-{{6.0,7,8,9,10}-dev,{11,12,13}-linker-tools} g{cc,++}-{7,8,9,10,11}

    - uses: actions/checkout@v4

    - name: Get available compilers, run warnings summary builds
      run: |
        set +e
        uname -a
        scripts/warnings-summary.sh
        . scripts/lib.sh
        get_compilers
        printf '%s\n' "${compilers[@]}" > compilers

    - name: GCC debug builds
      run: |
        set +e
        for _cc in $(grep '^gcc' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#gcc/g++}"
          _dir="build/dbg_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" debug=1 CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: Clang debug builds
      run: |
        set +e
        for _cc in $(grep '^clang' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#clang/clang++}"
          _dir="build/dbg_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" debug=1 CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: GCC release builds
      run: |
        set +e
        for _cc in $(grep '^gcc' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#gcc/g++}"
          _dir="build/rel_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: Clang release builds
      run: |
        set +e
        for _cc in $(grep '^clang' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#clang/clang++}"
          _dir="build/rel_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: Report
      run: |
        set +e
        shopt -s nullglob
        a=($(printf '%s\n' build/*/failed | grep -Ev '^[[:blank:]]*$' | sort -V -r))
        b=($(printf '%s\n' build/*/test   | grep -Ev '^[[:blank:]]*$' | sort -V -r))
        c=($(printf '%s\n' build/*/       | grep -Ev '^[[:blank:]]*$' | sort -V -r))
        declare -i m=${#a[@]} n=0 p=${#b[@]} q=${#c[@]}
        x="$m/$q build failure"
        (( m == 1 )) || x+='s'
        (( m == 0 )) || x+=':'
        echo "$x"
        if (( m )); then
          a=("${a[@]%/failed}")
          printf '%s\n' "${a[@]/#build\//- }"
        fi
        if (( p )); then
          echo 'Running tests...'
          for x in "${b[@]}"; do
            y=$("$x" 2>&1)
            (( n += $? != 0 ))
            x="${x#build/}"
            printf -vx -- '%-13s|' "${x%/test}"
            echo "$y" | sed "s,^,$x ,"
          done
          x="$n/$p test failure"
          (( n == 1 )) || x+='s'
          echo "$x"
        fi
        ((p = q - m - n))
        echo "$p/$q in the green"
        (( p == q ))

  build-macos-14:
    runs-on: macos-14
    steps:
    - name: Install dependencies
      run: |
        set +e
        alias nproc='sysctl -n hw.logicalcpu'
        echo "bash $BASH_VERSION"
        brew update
        brew upgrade
        brew install bash binutils cjson coreutils gnu-sed llvm make
        if [[ -z "$HOMEBREW_PREFIX" ]]; then
          export HOMEBREW_PREFIX="$(brew --prefix)"
          echo 'export HOMEBREW_PREFIX="$(brew --prefix)"' >> "$HOME/.bash_profile"
          echo "HOMEBREW_PREFIX=$HOMEBREW_PREFIX" >> "$GITHUB_ENV"
        fi
        export PATH="$HOMEBREW_PREFIX/opt/binutils/bin:$HOMEBREW_PREFIX/opt/llvm/bin:$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$HOMEBREW_PREFIX/opt/gnu-sed/libexec/gnubin:$HOMEBREW_PREFIX/opt/make/libexec/gnubin:$PATH"
        echo "export PATH=\"$PATH\"" >> "$HOME/.bash_profile"
        echo "PATH=$PATH" >> "$GITHUB_ENV"

    - uses: actions/checkout@v4

    - name: Get available compilers, run warnings summary builds
      shell: bash
      run: |
        set +e
        uname -a
        echo "bash $BASH_VERSION"
        alias nproc='sysctl -n hw.logicalcpu'
        scripts/warnings-summary.sh
        . scripts/lib.sh
        get_compilers
        printf '%s\n' "${compilers[@]}" > compilers

    - name: GCC debug builds
      shell: bash
      run: |
        set +e
        alias nproc='sysctl -n hw.logicalcpu'
        for _cc in $(grep '^gcc' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#gcc/g++}"
          _dir="build/dbg_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" debug=1 CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: Clang debug builds
      shell: bash
      run: |
        set +e
        alias nproc='sysctl -n hw.logicalcpu'
        for _cc in $(grep '^clang' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#clang/clang++}"
          _dir="build/dbg_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" debug=1 CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: GCC release builds
      shell: bash
      run: |
        set +e
        alias nproc='sysctl -n hw.logicalcpu'
        for _cc in $(grep '^gcc' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#gcc/g++}"
          _dir="build/rel_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: Clang release builds
      shell: bash
      run: |
        set +e
        alias nproc='sysctl -n hw.logicalcpu'
        for _cc in $(grep '^clang' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#clang/clang++}"
          _dir="build/rel_$_cc"
          mkdir -p "$_dir"
          make -j$(nproc) -C src O="../$_dir" CC="$_cc" CXX="$_cxx"
          (( $? == 0 )) || touch "$_dir/failed"
        done

    - name: Report
      run: |
        set +e
        shopt -s nullglob
        a=($(printf '%s\n' build/*/failed | grep -Ev '^[[:blank:]]*$' | sort -V -r))
        b=($(printf '%s\n' build/*/test   | grep -Ev '^[[:blank:]]*$' | sort -V -r))
        c=($(printf '%s\n' build/*/       | grep -Ev '^[[:blank:]]*$' | sort -V -r))
        declare -i m=${#a[@]} n=0 p=${#b[@]} q=${#c[@]}
        x="$m/$q build failure"
        (( m == 1 )) || x+='s'
        (( m == 0 )) || x+=':'
        echo "$x"
        if (( m )); then
          a=("${a[@]%/failed}")
          printf '%s\n' "${a[@]/#build\//- }"
        fi
        if (( p )); then
          echo 'Running tests...'
          for x in "${b[@]}"; do
            y=$("$x" 2>&1)
            (( n += $? != 0 ))
            x="${x#build/}"
            printf -vx -- '%-13s|' "${x%/test}"
            echo "$y" | sed "s,^,$x ,"
          done
          x="$n/$p test failure"
          (( n == 1 )) || x+='s'
          echo "$x"
        fi
        ((p = q - m - n))
        echo "$p/$q in the green"
        (( p == q ))
