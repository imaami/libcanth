name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-ubuntu-24_04:
    runs-on: ubuntu-24.04
    steps:
    - name: Add apt.llvm.org
      run: |
        echo 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble main' | sudo tee /etc/apt/sources.list.d/apt.llvm.org.list
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc

    - name: Upgrade packages
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y

    - name: Install library dependencies
      run: |
        sudo apt-get install libcjson-dev

    - name: Upgrade Clang
      run: |
        sudo apt-get install clang{,-{format,tidy,tools}} lib{c++{,abi},clang,omp}-dev lld llvm{,-dev,-runtime}

    - name: Install Clang 15 and 14
      run: |
        sudo apt-get install clang-{15,14}

    - name: Install GCC 11, 10, and 9
      run: |
        sudo apt-get install {gcc,g++}-{11,10,9}

    - name: Add Ubuntu 22.04 repo
      run: |
        printf 'deb http://archive.ubuntu.com/ubuntu/ %s main restricted universe multiverse\n' jammy{,-{updates,security,backports}} | sudo tee /etc/apt/sources.list.d/jammy.list
        sudo apt-get update

    - name: Install Clang 13, 12, and 11
      run: |
        sudo apt-get install clang-{13,12,11} llvm-{13,12,11}-linker-tools

    - name: Add Ubuntu 20.04 repo
      run: |
        printf 'deb http://archive.ubuntu.com/ubuntu/ %s main restricted universe multiverse\n' focal{,-{updates,security,backports}} | sudo tee /etc/apt/sources.list.d/focal.list
        sudo apt-get update

    - name: Install Clang 10, 9, 8, 7, and 6
      run: |
        sudo apt-get install clang-{10,9,8,7,6.0} llvm-{10,9,8,7,6.0}-dev

    - name: Describe host
      run: |
        uname -a
        gcc --version
        clang --version

    - uses: actions/checkout@v4

    - name: Introspect compilers
      run: |
        set +e
        { compgen -c clang; compgen -c gcc; } | grep -E '^(clang|gcc)(-[1-9][0-9]*)?$' | sort -V -u -r > compilers
        grep -Fxe clang -e gcc compilers > default-compilers
        cat default-compilers | xargs -I§ bash -c 'realpath "$(command -v §)" 2>/dev/null' | paste - default-compilers | grep -Ev '^[[:blank:]]*$' > default-compilers2
        grep -Fvxf default-compilers compilers > versioned-compilers
        cat versioned-compilers | xargs -I§ bash -c 'realpath "$(command -v §)" 2>/dev/null' | paste - versioned-compilers | grep -Ev '^[[:blank:]]*$' > versioned-compilers2
        sed 's/-[1-9][0-9]*$//' versioned-compilers2 | grep -Fxvf- default-compilers2 > compilers2
        cat versioned-compilers2 >> compilers2
        cut -f2 compilers2 > compilers
        rm -f compilers2 default-compilers2 versioned-compilers2
        cat compilers

    - name: GCC debug builds
      run: |
        for _cc in $(grep '^gcc' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#gcc/g++}"
          mkdir -p "build/dbg_$_cc"
          make -j$(nproc) -C src O="../build/dbg_$_cc" debug=1 CC="$_cc" CXX="$_cxx"
        done

    - name: Clang debug builds
      run: |
        for _cc in $(grep '^clang' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#clang/clang++}"
          mkdir -p "build/dbg_$_cc"
          make -j$(nproc) -C src O="../build/dbg_$_cc" debug=1 CC="$_cc" CXX="$_cxx"
        done

    - name: GCC release builds
      run: |
        for _cc in $(grep '^gcc' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#gcc/g++}"
          mkdir -p "build/rel_$_cc"
          make -j$(nproc) -C src O="../build/rel_$_cc" CC="$_cc" CXX="$_cxx"
        done

    - name: Clang release builds
      run: |
        for _cc in $(grep '^clang' compilers); do
          [[ -z "$_cxx" ]] || printf '\n\n========================================\n'
          _cxx="${_cc/#clang/clang++}"
          mkdir -p "build/rel_$_cc"
          make -j$(nproc) -C src O="../build/rel_$_cc" CC="$_cc" CXX="$_cxx"
        done
